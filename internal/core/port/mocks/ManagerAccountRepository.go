// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "go-hex-arch/internal/core/domain"
	dto "go-hex-arch/internal/core/dto"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ManagerAccountRepository is an autogenerated mock type for the ManagerAccountRepository type
type ManagerAccountRepository struct {
	mock.Mock
}

type ManagerAccountRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ManagerAccountRepository) EXPECT() *ManagerAccountRepository_Expecter {
	return &ManagerAccountRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, manager
func (_m *ManagerAccountRepository) Create(ctx context.Context, manager domain.ManagerAccount) (*domain.ManagerAccount, error) {
	ret := _m.Called(ctx, manager)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.ManagerAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ManagerAccount) (*domain.ManagerAccount, error)); ok {
		return rf(ctx, manager)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ManagerAccount) *domain.ManagerAccount); ok {
		r0 = rf(ctx, manager)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ManagerAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ManagerAccount) error); ok {
		r1 = rf(ctx, manager)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ManagerAccountRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ManagerAccountRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - manager domain.ManagerAccount
func (_e *ManagerAccountRepository_Expecter) Create(ctx interface{}, manager interface{}) *ManagerAccountRepository_Create_Call {
	return &ManagerAccountRepository_Create_Call{Call: _e.mock.On("Create", ctx, manager)}
}

func (_c *ManagerAccountRepository_Create_Call) Run(run func(ctx context.Context, manager domain.ManagerAccount)) *ManagerAccountRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ManagerAccount))
	})
	return _c
}

func (_c *ManagerAccountRepository_Create_Call) Return(_a0 *domain.ManagerAccount, _a1 error) *ManagerAccountRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ManagerAccountRepository_Create_Call) RunAndReturn(run func(context.Context, domain.ManagerAccount) (*domain.ManagerAccount, error)) *ManagerAccountRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *ManagerAccountRepository) Get(ctx context.Context, id uuid.UUID) (*domain.ManagerAccount, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.ManagerAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.ManagerAccount, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.ManagerAccount); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ManagerAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ManagerAccountRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ManagerAccountRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *ManagerAccountRepository_Expecter) Get(ctx interface{}, id interface{}) *ManagerAccountRepository_Get_Call {
	return &ManagerAccountRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *ManagerAccountRepository_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ManagerAccountRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ManagerAccountRepository_Get_Call) Return(_a0 *domain.ManagerAccount, _a1 error) *ManagerAccountRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ManagerAccountRepository_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*domain.ManagerAccount, error)) *ManagerAccountRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetList provides a mock function with given fields: ctx, query, managerQuery
func (_m *ManagerAccountRepository) GetList(ctx context.Context, query dto.Query, managerQuery dto.QueryManagerAccount) (*dto.List[domain.ManagerAccount], error) {
	ret := _m.Called(ctx, query, managerQuery)

	if len(ret) == 0 {
		panic("no return value specified for GetList")
	}

	var r0 *dto.List[domain.ManagerAccount]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Query, dto.QueryManagerAccount) (*dto.List[domain.ManagerAccount], error)); ok {
		return rf(ctx, query, managerQuery)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.Query, dto.QueryManagerAccount) *dto.List[domain.ManagerAccount]); ok {
		r0 = rf(ctx, query, managerQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.List[domain.ManagerAccount])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.Query, dto.QueryManagerAccount) error); ok {
		r1 = rf(ctx, query, managerQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ManagerAccountRepository_GetList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetList'
type ManagerAccountRepository_GetList_Call struct {
	*mock.Call
}

// GetList is a helper method to define mock.On call
//   - ctx context.Context
//   - query dto.Query
//   - managerQuery dto.QueryManagerAccount
func (_e *ManagerAccountRepository_Expecter) GetList(ctx interface{}, query interface{}, managerQuery interface{}) *ManagerAccountRepository_GetList_Call {
	return &ManagerAccountRepository_GetList_Call{Call: _e.mock.On("GetList", ctx, query, managerQuery)}
}

func (_c *ManagerAccountRepository_GetList_Call) Run(run func(ctx context.Context, query dto.Query, managerQuery dto.QueryManagerAccount)) *ManagerAccountRepository_GetList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.Query), args[2].(dto.QueryManagerAccount))
	})
	return _c
}

func (_c *ManagerAccountRepository_GetList_Call) Return(_a0 *dto.List[domain.ManagerAccount], _a1 error) *ManagerAccountRepository_GetList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ManagerAccountRepository_GetList_Call) RunAndReturn(run func(context.Context, dto.Query, dto.QueryManagerAccount) (*dto.List[domain.ManagerAccount], error)) *ManagerAccountRepository_GetList_Call {
	_c.Call.Return(run)
	return _c
}

// NewManagerAccountRepository creates a new instance of ManagerAccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManagerAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ManagerAccountRepository {
	mock := &ManagerAccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
